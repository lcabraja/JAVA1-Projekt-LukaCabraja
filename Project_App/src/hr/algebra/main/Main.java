/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.main;

import hr.algebra.admin.CinestarDownload;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.login.Login;
import hr.algebra.model.Role;
import hr.algebra.model.RoleTypes;
import hr.algebra.model.User;
import hr.algebra.user.Crudable;
import hr.algebra.user.Refreshable;
import hr.algebra.user.MovieCRUD;
import hr.algebra.user.PersonCRUD;
import hr.algebra.utils.MessageUtils;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author lcabraja
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        init();
    }

    private Repository repository;

    private User user = null;
    private CinestarDownload cinestarDownload;
    private Login loginForm;
    private MovieCRUD movieCrud;
    private PersonCRUD actorCrud;
    private PersonCRUD directorCrud;
    private Crudable selectedCrudable;
    private Refreshable selectedRefreshable;

    private List<Crudable> userCrudables;
    private List<Refreshable> userRefreshables;
    private List<String> userTabNames;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        miRefresh = new javax.swing.JMenuItem();
        miDownloadXML = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jMenu1.setText("File");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Fidget Toggler");
        jMenu1.add(jCheckBoxMenuItem1);

        miRefresh.setText("Refresh");
        miRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRefreshActionPerformed(evt);
            }
        });
        jMenu1.add(miRefresh);

        miDownloadXML.setText("Download XML");
        miDownloadXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDownloadXMLActionPerformed(evt);
            }
        });
        jMenu1.add(miDownloadXML);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Logged in");
        jMenu2.setEnabled(false);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_miExitActionPerformed

    private void miDownloadXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDownloadXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_miDownloadXMLActionPerformed

    private void miRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRefreshActionPerformed
        selectedRefreshable.refreshData();
    }//GEN-LAST:event_miRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    //<editor-fold defaultstate="collapsed" desc="Variable Declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem miDownloadXML;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miRefresh;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

    private void init() {
        try {
            initWindow();
            initRepository();
            setCurrentAccountMenu();
            createPanels();
            setLoginTabs();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initWindow() {
        setLocationRelativeTo(null);
        setTitle("JAVA1DB");
    }

    private void prepareTabs() {
        userCrudables = Arrays.asList(movieCrud, actorCrud, directorCrud);
        userRefreshables = Arrays.asList(movieCrud, actorCrud, directorCrud);
        userTabNames = Arrays.asList("movie", "actor", "director");

        jTabbedPane1.addChangeListener((ChangeEvent e) -> {
            final int selectedIndex = jTabbedPane1.getSelectedIndex();
            if (selectedIndex >= 0) {
                selectedCrudable = userCrudables.get(selectedIndex);
                selectedRefreshable = userRefreshables.get(selectedIndex);
                setUserMenu(userTabNames.get(selectedIndex));
            }
        });
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void setCurrentAccountMenu() {
        if (user == null) {
            return;
        }
        jMenu2.setEnabled(true);

        JMenuItem m2Username = new JMenuItem("As: " + user.getUsername());
        JMenuItem m2Role = new JMenuItem("Role: " + user.getRole());
        JMenuItem m2AccessLevel = new JMenuItem("Access Level: " + user.getAccessLevel());
        JMenuItem m2LogOut = new JMenuItem("Log Out");

        m2LogOut.addActionListener((ActionEvent ev) -> {
            userLoggedOut();
        });

        jMenu2.removeAll();
        jMenu2.add(m2Username);
        jMenu2.add(m2Role);
        jMenu2.add(m2AccessLevel);
        jMenu2.add(m2LogOut);
    }

    private void createPanels() {
        loginForm = new Login(this);
    }

    private void createAdminPanels() {
        cinestarDownload = new CinestarDownload();
    }

    private void createUserPanels() {
        movieCrud = new MovieCRUD();
        actorCrud = new PersonCRUD(RoleTypes.Actor);
        directorCrud = new PersonCRUD(RoleTypes.Director);
    }

    private void setLoginTabs() {
        jTabbedPane1.removeAll();
        jTabbedPane1.addTab("Login", loginForm);
    }

    private void setAdminTabs() {
        jTabbedPane1.removeAll();
        jTabbedPane1.addTab("Cinestar RSS", cinestarDownload);
    }

    private void setUserTabs() {
        jTabbedPane1.removeAll();
        jTabbedPane1.addTab("Movie CRUD", movieCrud);
        jTabbedPane1.addTab("Actor CRUD", actorCrud);
        jTabbedPane1.addTab("Director CRUD", directorCrud);
    }

    private void setAdminMenu() {
        JMenu adminMenu = new JMenu("Admin");
        JMenuItem clearAll = new JMenuItem("Clear Database");

        clearAll.addActionListener((ActionEvent ev) -> {

            if (MessageUtils.showConfirmDialog("Delete entire database?", "Please confirm that you want to delete the entire database.") == JOptionPane.YES_OPTION) {
                try {
                    repository.clearAllData(user);
                } catch (Exception ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        adminMenu.add(clearAll);
        jMenuBar1.add(adminMenu);
    }

    private void setUserMenu(String itemName) {
        clearMenuBar(2);
        JMenu crudMenu = new JMenu("CRUD");
        JMenuItem clearForm = new JMenuItem("Clear form");
        JMenuItem createItem = new JMenuItem("Create " + itemName);
        JMenuItem updateItem = new JMenuItem("Update " + itemName);
        JMenuItem deleteItem = new JMenuItem("Delete " + itemName);

        clearForm.addActionListener((ActionEvent e) -> {
            selectedCrudable.clearAction();
        });
        createItem.addActionListener((ActionEvent e) -> {
            selectedCrudable.createAction();
        });
        updateItem.addActionListener((ActionEvent e) -> {
            selectedCrudable.updateAction();
        });
        deleteItem.addActionListener((ActionEvent e) -> {
            selectedCrudable.deleteAction();
        });

        crudMenu.add(clearForm);
        crudMenu.add(createItem);
        crudMenu.add(updateItem);
        crudMenu.add(deleteItem);

        jMenuBar1.add(crudMenu);
    }

    public void userLoggedIn(User user) {
        this.user = user;
        setCurrentAccountMenu();

        if ("Admin".equals(user.getRole())) {
            createAdminPanels();
            setAdminTabs();
            setAdminMenu();
        } else {
            createUserPanels();
            selectedCrudable = movieCrud;
            selectedRefreshable = movieCrud;
            setUserTabs();
            setUserMenu("movie");
            prepareTabs();
        }
    }

    public void userLoggedOut() {
        jMenu2.setEnabled(false);
        clearMenuBar(2);
        setLoginTabs();
    }

    private void clearMenuBar(int remaining) {
        while (jMenuBar1.getMenuCount() > remaining) {
            jMenuBar1.remove(remaining);
        }
    }
}
