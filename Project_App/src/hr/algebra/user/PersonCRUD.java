/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.user;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieRolesTableModel;
import hr.algebra.model.MovieShortTableModel;
import hr.algebra.model.Role;
import hr.algebra.model.RoleTableModel;
import hr.algebra.model.RoleTransferable;
import hr.algebra.model.RoleTypes;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.table.AbstractTableModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lcabraja
 */
public class PersonCRUD extends javax.swing.JPanel implements Crudable, Refreshable {

    private final RoleTypes ROLE_TYPE;

    /**
     * Creates new form PersonCRUD
     *
     * @param roleType
     */
    public PersonCRUD(RoleTypes roleType) {
        initComponents();
        this.ROLE_TYPE = roleType;
        init();
    }

    private List<JTextComponent> validationFields;
    private List<Integer> validationLengths;
    private List<JLabel> errorLabels;

    private Repository repository;

    private List<Role> roles;
    private Movie selectedMovie;
    private Role selectedRole;

    private RoleTableModel roleTableModel;
    private MovieRolesTableModel movieRolesTableModel;
    private MovieShortTableModel moviesShortTableModel;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbRoleID = new javax.swing.JLabel();
        lbErrRoleID = new javax.swing.JLabel();
        tfRoleID = new javax.swing.JTextField();
        lbPersonID = new javax.swing.JLabel();
        lbErrPersonID = new javax.swing.JLabel();
        tfPersonID = new javax.swing.JTextField();
        lbAlternateName = new javax.swing.JLabel();
        lbErrAlternateName = new javax.swing.JLabel();
        tfAlternateName = new javax.swing.JTextField();
        lbFullName = new javax.swing.JLabel();
        lbErrFullName = new javax.swing.JLabel();
        tfFullName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbRoles = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMoviesShort = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbMoviesPeople = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(751, 477));
        setPreferredSize(new java.awt.Dimension(751, 477));

        lbRoleID.setText("ID");

        lbErrRoleID.setText("X");

        tfRoleID.setText("jTextField1");

        lbPersonID.setText("PersonID");

        lbErrPersonID.setText("X");

        tfPersonID.setText("jTextField1");

        lbAlternateName.setText("Alternate Name");

        lbErrAlternateName.setText("X");

        tfAlternateName.setText("jTextField1");

        lbFullName.setText("Full Name");

        lbErrFullName.setText("X");

        tfFullName.setText("jTextField1");

        tbRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbRoles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbRolesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbRoles);

        tbMoviesShort.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMoviesShort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesShortMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbMoviesShort);

        tbMoviesPeople.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMoviesPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesPeopleMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbMoviesPeople);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbAlternateName)
                            .addComponent(lbPersonID)
                            .addComponent(lbRoleID)
                            .addComponent(lbFullName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfFullName, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbErrFullName))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfRoleID)
                                    .addComponent(tfPersonID)
                                    .addComponent(tfAlternateName))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbErrAlternateName)
                                    .addComponent(lbErrPersonID)
                                    .addComponent(lbErrRoleID))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbRoleID)
                            .addComponent(tfRoleID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrRoleID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbPersonID)
                            .addComponent(tfPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrPersonID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbAlternateName)
                            .addComponent(tfAlternateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrAlternateName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbFullName)
                            .addComponent(tfFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrFullName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbRolesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRolesMouseClicked
        int selectedTableItemID = getSelectedTableItemID(tbRoles, roleTableModel);
        Optional<Role> roleFromRepo = getRoleFromRepository(selectedTableItemID);
        if (roleFromRepo.isPresent()) {
            selectedRole = roleFromRepo.get();
            fillForm(roleFromRepo.get());
        }
    }//GEN-LAST:event_tbRolesMouseClicked

    private void tbMoviesPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesPeopleMouseClicked
        getSelectedTableItemID(tbMoviesPeople, movieRolesTableModel);
    }//GEN-LAST:event_tbMoviesPeopleMouseClicked

    private void tbMoviesShortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesShortMouseClicked
        int selectedTableItemID = getSelectedTableItemID(tbMoviesShort, moviesShortTableModel);
        try {
            Optional<Movie> selectedMovie = repository.selectMovie(selectedTableItemID);
            if (selectedMovie.isPresent()) {
                this.selectedMovie = selectedMovie.get();
                updateRolesFromRepository();
                movieRolesTableModel.setMovieRoles(this.selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(PersonCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbMoviesShortMouseClicked

    // <editor-fold defaultstate="collapsed" desc="Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbAlternateName;
    private javax.swing.JLabel lbErrAlternateName;
    private javax.swing.JLabel lbErrFullName;
    private javax.swing.JLabel lbErrPersonID;
    private javax.swing.JLabel lbErrRoleID;
    private javax.swing.JLabel lbFullName;
    private javax.swing.JLabel lbPersonID;
    private javax.swing.JLabel lbRoleID;
    private javax.swing.JTable tbMoviesPeople;
    private javax.swing.JTable tbMoviesShort;
    private javax.swing.JTable tbRoles;
    private javax.swing.JTextField tfAlternateName;
    private javax.swing.JTextField tfFullName;
    private javax.swing.JTextField tfPersonID;
    private javax.swing.JTextField tfRoleID;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    private void init() {
        try {
            initValidation();
            initRepository();
            initFields();
            initTables();
            clearForm();

        } catch (Exception ex) {
            Logger.getLogger(PersonCRUD.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfRoleID, tfPersonID, tfAlternateName, tfFullName);
        validationLengths = Arrays.asList(-1, -1, 128, 128);
        errorLabels = Arrays.asList(lbErrRoleID, lbErrPersonID, lbErrAlternateName, lbErrFullName);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initFields() {
        selectedRole = null;
        try {
            switch (ROLE_TYPE) {
                case Actor:
                    roles = repository.selectActors();
                    break;
                case Director:
                    roles = repository.selectDirectors();
                    break;
                default:
                    throw new RuntimeException("Cannot find requested Role Type");
            }
        } catch (Exception ex) {
            showDatabaseConnectionError();
        }
    }

    private void initTables() throws Exception {
        tbRoles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbRoles.setAutoCreateRowSorter(true);
        tbRoles.setRowHeight(25);
        roleTableModel = new RoleTableModel(roles, ROLE_TYPE);
        tbRoles.setModel(roleTableModel);
        tbRoles.setDragEnabled(true);
        tbRoles.setTransferHandler(new ExportTransferHandler());

        tbMoviesPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMoviesPeople.setAutoCreateRowSorter(true);
        tbMoviesPeople.setRowHeight(25);
        movieRolesTableModel = new MovieRolesTableModel(new Movie(), ROLE_TYPE);
        tbMoviesPeople.setModel(movieRolesTableModel);
        tbMoviesPeople.setDropMode(DropMode.ON);
        tbMoviesPeople.setTransferHandler(new ImportTransferHandler());

        tbMoviesShort.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMoviesShort.setAutoCreateRowSorter(true);
        tbMoviesShort.setRowHeight(25);
        moviesShortTableModel = new MovieShortTableModel(repository.selectMovies());
        tbMoviesShort.setModel(moviesShortTableModel);
    }

    private void updateRolesFromRepository() {
        try {
            switch (ROLE_TYPE) {
                case Actor:
                    roleTableModel.setRoles(repository.selectActors());
                    break;
                case Director:
                    roleTableModel.setRoles(repository.selectDirectors());
                    break;
                default:
                    throw new RuntimeException("Cannot find requested Role Type");
            }
        } catch (Exception ex) {
            showDatabaseConnectionError();
        }
    }

    private int createRoleInRepository(Role role) {
        try {
            switch (ROLE_TYPE) {
                case Actor:
                    return repository.createActor(role);
                case Director:
                    return repository.createDirector(role);
                default:
                    throw new RuntimeException("Cannot find requested Role Type");
            }
        } catch (Exception ex) {
            showDatabaseConnectionError();
            return -1;
        }
    }

    private void updateRoleInRepository(Role role) {
        try {
            switch (ROLE_TYPE) {
                case Actor:
                    repository.updateActor(role.getIdRole(), role);
                    break;
                case Director:
                    repository.updateDirector(role.getIdRole(), role);
                    break;
                default:
                    throw new RuntimeException("Cannot find requested Role Type");
            }
        } catch (Exception ex) {
            showDatabaseConnectionError();
        }
    }

    private Optional<Role> getRoleFromRepository(int idRole) {
        try {
            switch (ROLE_TYPE) {
                case Actor:
                    return repository.selectActor(idRole);
                case Director:
                    return repository.selectDirector(idRole);
                default:
                    throw new RuntimeException("Cannot find requested Role Type");
            }
        } catch (Exception ex) {
            showDatabaseConnectionError();
            return null;
        }
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            // defines icon shown in target before drop
            return COPY;
            //return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new RoleTransferable(roleTableModel.getRoleAt(tbRoles.getSelectedRow()));
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        // we define whether we can import stringFlavor that we need for JList<String>
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(RoleTransferable.ROLE_FLAVOR);
        }

        // we import the data
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Role data = (Role) transferable.getTransferData(RoleTransferable.ROLE_FLAVOR);
                if (!movieRolesTableModel.contains(data)) {
                    movieRolesTableModel.addMovieRole(data);
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PersonCRUD.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private boolean formValid() {
        boolean ok = true;
        boolean condition;
        for (int i = 0; i < validationFields.size(); i++) {
            condition = validationLengths.get(i) > 0 ? validationLengths.get(i) >= validationFields.get(i).getText().trim().length() : true;

            //int min = validationFields.get(i).getText().length();
            //min = min > 10 ? 10 : min;
            //System.out.println(validationFields.get(i).getText().substring(0, min) + " | " + validationLengths.get(i) + " >= " + validationFields.get(i).getText().trim().length() + " = " + condition);
            ok &= condition;
            errorLabels.get(i).setText(!condition ? "X" : "");
        }
        return ok;
    }

    private void clearForm() {
        validationFields.forEach((component) -> {
            component.setText("");
        });
        errorLabels.forEach((component) -> {
            component.setText("");
        });
    }

    private int getSelectedTableItemID(JTable tableClicked, AbstractTableModel modelReference) {
        int selectedRow = tableClicked.getSelectedRow();
        int rowIndex = tableClicked.convertRowIndexToModel(selectedRow);
        int selectedItemID = (int) modelReference.getValueAt(rowIndex, 0);
        return selectedItemID;
    }

    private void fillForm(Role role) {
        tfRoleID.setText(String.valueOf(role.getIdRole()));
        tfPersonID.setText(String.valueOf(role.getPersonID()));
        tfAlternateName.setText(role.getAlternateName());
        tfFullName.setText(role.getFullName());
    }

    @Override
    public void createAction() {
        if (formValid()) {
            Role newRole = new Role(
                    -1,
                    -1,
                    tfFullName.getText().trim(),
                    tfAlternateName.getText().trim()
            );
            try {
                createRoleInRepository(newRole);
                updateRolesFromRepository();
                clearAction();
            } catch (Exception ex) {
                Logger.getLogger(MovieCRUD.class.getName()).log(Level.SEVERE, null, ex);
                showDatabaseConnectionError();
            }
        }
    }

    @Override
    public void updateAction() {
        if (formValid()) {
            Role newRole = new Role(
                    selectedRole.getIdRole(),
                    selectedRole.getPersonID(),
                    tfFullName.getText().trim(),
                    tfAlternateName.getText().trim()
            );
            try {
                updateRoleInRepository(newRole);
                updateRolesFromRepository();
                clearAction();
            } catch (Exception ex) {
                Logger.getLogger(MovieCRUD.class.getName()).log(Level.SEVERE, null, ex);
                showDatabaseConnectionError();
            }
        }
    }

    @Override
    public void deleteAction() {
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete: " + selectedRole.getFullName()) == JOptionPane.YES_OPTION) {
            try {
                repository.deleteMovie(selectedRole.getIdRole());
                clearAction();
                refreshData();
            } catch (Exception ex) {
                Logger.getLogger(MovieCRUD.class.getName()).log(Level.SEVERE, null, ex);
                showDatabaseConnectionError();
            }
        }
    }

    @Override
    public void clearAction() {
        clearForm();
        movieRolesTableModel.clearModel();
        tbRoles.clearSelection();
        tbMoviesShort.clearSelection();
    }

    @Override
    public void refreshData() {
        try {
            movieRolesTableModel.clearModel();
            moviesShortTableModel.setMovies(repository.selectMovies());
            roleTableModel.setRoles(repository.selectActors());
        } catch (Exception ex) {
            Logger.getLogger(MovieCRUD.class.getName()).log(Level.SEVERE, null, ex);
            showDatabaseConnectionError();
        }
    }

    private void showDatabaseConnectionError() {
        MessageUtils.showInformationMessage("Database Error", "Could not connect to database, please try again later...");
    }
}
